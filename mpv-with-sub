#!/bin/bash

# mpv-with-sub - Bash shell script for mpv's subtitle with episodes

# Copyright 2020, Taeseong Ryu <formeu2s@gmail.com>

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License at <http://www.gnu.org/licenses/> for
# more details.

# I wrote this script to play a video for emacs' dired mode in EXWM
# especially for the file with episodes

# this script has the following options
# 1. only one subtitle in the directory (recursive)
# 2. exactly same name with video file
# 3. fuzzy subtitle with video file
# 4. episode subtitle like S01E01
# 5. in terminal, if subtitles exist, you can choose one or all

# it searches a current directory recursively first, if none, searches SUBDIR
# if it fails to find a subtitle, it uses the mpv's original option

# the episode part of a subtitle
#
# S01E01 or S01.E01
# E01
# Series.1.Part.1

## TODO
#


shopt -s globstar # Allow ** for recursive matches
set -u # avoid a undeclared variable
PS3='
# 00 for all
choose : '
g_arg=( "$@" )
g_arg0="$0"
g_arg1="$1"
g_arg2="${2:-}"
SCRIPT_PATH=$(realpath "$g_arg0")
SCRIPT_DIR="${SCRIPT_PATH%/*}"
SCRIPT_NAME="${SCRIPT_PATH##*/}"
SCRIPT_VERSION=0.1
SUB_EXT='(srt|smi|ass|sub)'
#
# add another subtitle directory
#
SUB_DIRS=( '/mnt/data/Downloads/sub'  '/mnt/data/Downloads' )
video_file="${g_arg1##*/}"
video_dir="${g_arg1%$video_file}"
video_file_ext=${g_arg1##*.}
video_sans_name="${video_file%.$video_file_ext}"
video_lower_name="${video_sans_name,,}"
#
# basic regex escape ‘\?’, ‘\+’, ‘\|’, ‘\{’, '\}', ‘\(’, and ‘\)’
#
G1='s[0-9]\+\.\?e[0-9]\+'
G2='e[0-9]\+'
G3='series\.\?[0-9]\+\.\?part\.\?[0-9]\+'
ep1=$(grep -o "$G1" <<< $video_lower_name)
ep2=$(grep -o "$G2" <<< $video_lower_name)
ep3=$(grep -o "$G3" <<< $video_lower_name)
ep="${ep1:-${ep2:-$ep3}}" # need test
# if [[ -n $ep1 ]]; then
#     ep="$ep1"
# elif [[ -n $ep2 ]]; then
#     ep="$ep2"
# elif [[ -n $ep3 ]]; then
#     ep="$ep3"
# fi


back_trace() {
    local max_length f1
    for key in "${!FUNCNAME[@]}"; do
        if (( ${#FUNCNAME[$key]} > ${max_length:-0} )); then
            max_length=${#FUNCNAME[$key]}
        fi
    done
    f1="\n%-${max_length}s : %5s"
    # printf "$f1" \
    #        "LINENO" ${LINENO}
    for key in ${!BASH_LINENO[@]}; do
        printf "$f1" \
               ${FUNCNAME[$key]} \
               ${BASH_LINENO[$key]}
    done
    printf "\n"
}
test_print() {
    local arg1="$1"
    local arg2="${2:-}"
    local items_number=0
    local p1='\n\e[1;38;5;40m%s item %s\e[0m\n'
    local p2='\n\e[1;38;5;40m%s items %s\e[0m\n'
    local p3='\n\e[1;38;5;220m%s %s\n\e[1;38;5;240m%s\e[0m'
    local caller_line_number=$(caller | cut -d ' ' -f 1)
    printf "$p3" \
           "${FUNCNAME[1]}()'s $arg1" \
           ":: $caller_line_number" \
           "$arg2"
    [[ -n $arg2 ]] && items_number=$(wc -l <<< $arg2)
    if (( $items_number == 1 )); then
        printf "$p1" $items_number
    elif (( $items_number > 1 )); then
        printf "$p2" $items_number
    else
        printf "$p1" no
    fi
    return 0
}

playing_print() {
    local arg1="$1"
    local p1='\n\e[1;38;5;130m %s\e[0m\n\n'
    printf "$p1" "$arg1"
    return 0
}

check() {
    local arg1="$1"
    local sub_count=0
    local subtitles1=
    local subtitles2=()
    local subtitles3=()
    local subtitles4=()
    local subtitles5=()
    local file_name lower_file file_name_ext file_sans_name
    local p1 p2
    for file in $arg1; do # error if quote
        file_name="${file##*/}"
        lower_file="${file_name,,}"
        file_name_ext=${lower_file##*.}
        file_sans_name="${lower_file%.$file_name_ext}"
        if [[ $file_name_ext =~ $SUB_EXT ]]; then
            ((sub_count++))
            subfile="$file"
            if [[ $file_sans_name == $video_sans_name ]]; then
                subtitles1="$file"
                # test_print subtitles1 "$subtitles1"
                break
            elif [[ $file_sans_name =~ $video_sans_name ]]; then
                subtitles2+=( "$file" )
                # test_print subtitles2 "${subtitles2[-1]}"
            elif [[ -n "$ep" ]]; then
                if [[ $file_sans_name =~ $ep|${ep/./}|${ep/e/.e} ]]; then
                    subtitles3+=( "$file" )
                    # test_print subtitles3 "${subtitles3[-1]}"
                elif [[ $file_sans_name =~ e0*${ep#*e} ]]; then
                    subtitles4+=( "$file" )
                    # test_print subtitles4 "${subtitles4[-1]}"
                elif [[ $file_sans_name =~ e0*${ep#*part\.} ]]; then
                    subtitles5+=( "$file" )
                    # test_print subtitles5 "${subtitles5[-1]}"
                fi
            fi
        fi
    done
    #
    # only one subtitle > exact > fuzz > s01e01 > e01 > series.1.part.1
    #
    if (( $sub_count == 1 )); then
        subtitles="$subfile"
    elif [[ -n $subtitles1 ]]; then
        subtitles="$subtitles1"
    elif [[ -n ${subtitles2[@]} ]]; then # need ${[@]} not $subtitles2
        subtitles=( "${subtitles2[@]}" )
    elif [[ -n ${subtitles3[@]} ]]; then
        subtitles=( "${subtitles3[@]}" )
    elif [[ -n ${subtitles4[@]} ]]; then
        subtitles=( "${subtitles4[@]}" )
    elif [[ -n ${subtitles5[@]} ]]; then
        subtitles=( "${subtitles5[@]}" )
    fi
    if [[ -z $subtitles ]]; then
        p1='\n \e[1;38;5;88m%s\n\n \e[1;38;5;240m%s\e[0m\n\n'
        printf "$p1" \
               "subtitle is not in :" \
               "${PWD}/"
    else
        p2='\n \e[1;38;5;98m%s\n\n \e[1;38;5;240m%s\e[0m\n\n'
        printf "$p2" \
               "subtitle is in :" \
               "${PWD}/"
    fi


    # test_print subtitles "${subtitles[*]}"
    return 0
}

_play() {
    #
    # with --sub-files="subtitle1:subtitle2
    #
    local arg1="$1"
    local the_subdir subfiles
    for subdir in "${SUB_DIRS[@]}"; do
        if [[ $arg1 =~ $subdir ]] ;then
            the_subdir="$subdir"
            break
        fi
    done
    for subtitle in "${subtitles[@]}"; do
        subfiles+="$subtitle":
    done
    subfiles="${subfiles%:}"
    if [[ $arg1 =~ $the_subdir ]]; then
        mpv --sub-files="$subfiles" "$g_arg1"
    else
        mpv --sub-files="$video_dir""$subfiles" "$g_arg1"
    fi
    return 0
}

play() {
    #
    # with array --sub-file="$subtitle1" --sub-file="$subtitle2"
    #
    local arg1="$1"
    local the_subdir=
    local subfiles
    for subdir in "${SUB_DIRS[@]}"; do
        if [[ $arg1 =~ $subdir ]] ;then
            the_subdir="$subdir"
            break
        fi
    done
    if [[ $arg1 =~ $the_subdir ]] ;then
        for subtitle in "${subtitles[@]}"; do
            subfiles+=( --sub-file="$subtitle" )
        done
    else
        for subtitle in "${subtitles[@]}"; do
            subfiles+=( --sub-file="$video_dir""$subtitle" )
        done
    fi
    mpv "${subfiles[@]}" "$g_arg1"
    return 0
}

order_subtitle() {
    #
    # accuracy as possible as we can
    #
    local video_part_name rating_sub
    local match1 match2
    local c=0
    if (( ${#subtitles[@]} > 1 )); then
        # test_print video_lower_name "$video_lower_name"
        video_part_name=$(sed "s/$ep.*//" <<< "$video_lower_name")
        # test_print video_part_name "$video_part_name"
        video_part_name=$(sed 's/\./ /g' <<< "$video_part_name")
        # test_print video_part_name "$video_part_name"
        readarray -d ' ' -t arr_part <<< "$video_part_name"
        # test_print arr_part "${arr_part[*]}"
        for sub in "${subtitles[@]}"; do
            for part in "${arr_part[@]}"; do
                [[ ${sub,,} =~ $part ]] && ((c++))
            done
            rating_sub+=$(printf "${rating_sub:+\n}%s %s" \
                                  $c \
                                  "$sub")
            c=0
        done
        # test_print rating_sub "$rating_sub"
        rating_sub=$(sort -r <<< $rating_sub) # reverse
        match1=$(sed -n 1p <<< $rating_sub  | grep -o '^[0-9]\+')
        match2=$(sed -n 2p <<< $rating_sub  | grep -o '^[0-9]\+')
        rating_sub=$(sed 's/^[0-9]\+ //' <<< $rating_sub)
        # test_print rating_sub "$rating_sub"
        # sleep 100
        if (( $match1 - $match2 )); then # test
            subtitles=( $(head -n 1  <<< $rating_sub) )
        else
            readarray -t subtitles <<< "$rating_sub"
        fi
    fi
    return 0
}

terminal_select () {
    #
    # when this script runs in terminal, select() activates.
    # added "--dired" as $2 to distinguish between emacs-dired and terminal
    #
    declare -g selected
    if [[ $g_arg2 != --dired ]]; then
        if (( ${#subtitles[@]} == 1 )); then
            selected="$subtitles"
        elif (( ${#subtitles[@]} > 1 )); then
            printf '\n' # needed
            select subtitle in "${subtitles[@]}"; do
                if [[ $REPLY =~ ^00$ ]]; then
                    printf '\n\n %s\n' \
                           'You choose all subtitles.'
                    playing_print "${subtitles[@]}"
                    play "${subtitles[@]}"
                    exit 0
                elif [[ -n $subtitle ]]; then
                    selected="$subtitle"
                    break
                else
                    printf '\n \e[1;31m%s\e[0m\n' \
                           'Something is wrong!'
                    back_trace
                    exit 1
                fi
            done
        fi
    fi
    return 0
}



declare -g subtitles=
if [[ ! -e $g_arg1 ]]; then
    printf '\n \e[1;31m%s\e[0m\n\n' \
           'mpv-with-sub requires a file as the first argument.'
    exit 2
fi
# test_print episode "$ep"
#
# for recursive directories
# probably need -2 deep level, otherwise so many files will be checked
#
[[ -n $video_dir ]] && cd "$video_dir"
check "**/*"
if [[ -z $subtitles ]]; then
    for subdir in "${SUB_DIRS[@]}"; do
        cd "$subdir"
        check "**/*"
        if [[ -n $subtitles ]]; then
            break
        fi
    done
fi
# terminal_select # can select() on terminal
if [[ -n ${selected:-} ]]; then
    playing_print "$selected"
    subtitles=( "$selected" )
    play "${subtitles[@]}"
elif [[ -n $subtitles ]]; then
    order_subtitle
    playing_print "${subtitles[@]}"
    play "${subtitles[@]}"
else
    mpv "$g_arg1"
fi
