#!/bin/bash

# I wrote this script to play video with subtitle for emacs' dired mode in EXWM
# especially for file with series episode

# this script has the following options
# 1. only one subtitle in the directory (recursive)
# 2. exactly same name with video file
# 3. fuzzy subtitle with video file
# 4. episode subtitle like S01E01
# 5. in terminal, if subtitles exist, you can choose one or all or none

# it searches current directory recursively first, if none, searches SUBDIR
# if it fails to find a subtitle, it uses a mpv's original option

# the episode part of subtitle
#
# S01E01 or S01.E01
# E01
# Series.1.Part.1

## TODO
#

if [[ ! -e $1 ]] ; then
    printf "\n"
    printf "\n mpv-with-sub requires a file as the first argument."
    printf "\n"
    exit 1
fi

arg1="$1"
PS3="
# for all, press 00
# for none, press 0
choose : "
SUBEXT="(srt|smi|ass|sub)"
SUBDIR="/mnt/data/Downloads/sub"
videofile="${1##*/}"
videodir="${1%"$videofile"}"
videofileext="${1##*.}"
videosansname="${videofile%."$videofileext"}"
lowername=${videosansname,,}
ep1=$(expr "$lowername" : ".*\(s[0-9]\+\.\?e[0-9]\+\).*")
ep2=$(expr "$lowername" : ".*\(e[0-9]\+\).*")
ep3=$(expr "$lowername" : ".*\(series\.\?[0-9]\+\.\?part\.\?[0-9]\+\).*")

grep-print() {
    printf "\n"
    grep --color=auto . <<< "$1"
    printf "\n"
    retrun 0
}

test-print() {
    # return 0 # to test, comment this line
    printf "\n\n"$1" is "$2" \n\n"
    retrun 0
}

check() {
    for file in "$1" ; do
        filename="${file##*/}"
        lowerfile=${filename,,}
        filenameext="${lowerfile##*.}"
        filesansname="${lowerfile%."$filenameext"}"
        if [[ $filenameext =~ $SUBEXT ]] ; then
            (( subcount++ ))
            subfile="$file"
            if [[ $filesansname == $videosansname ]] ; then
                subtitles1="$file"
                # test-print subtitles1 "$subtitles1"
                break
            elif [[ $filesansname =~ $videosansname ]] ; then
                subtitles2="$file"
                # test-print subtitles2 "$subtitles2"
            elif [[ -n "$ep" ]] ; then
                if [[ $filesansname =~ $ep|${ep/./}|${ep/e/.e} ]] ; then
                    if [[ -z $subtitles3 ]] ; then
                        subtitles3="$file"
                    else
                        subtitles3="$subtitles3":"$file"
                    fi
                    # test-print subtitles3 "$subtitles3"
                elif [[ $filesansname =~ e0*"${ep#*e}" ]] ; then
                    if [[ -z $subtitles4 ]] ; then
                        subtitles4="$file"
                    else
                        subtitles4="$subtitles4":"$file"
                    fi
                    # test-print subtitles4 "$subtitles4"
                elif [[ $filesansname =~ e0*"${ep#*part\.}" ]] ; then
                    if [[ -z $subtitles5 ]] ; then
                        subtitles5="$file"
                    else
                        subtitles5="$subtitles5":"$file"
                    fi
                    # test-print subtitles5 "$subtitles5"
                fi
            fi
        fi
    done

    # only one subtitle > exact > fuzz > s01e01 > e01 > series.1.part.1
    if (( $subcount == 1 )) ; then subtitles="$subfile"
    elif [[ -n $subtitles1 ]] ; then subtitles="$subtitles1"
    elif [[ -n $subtitles2 ]] ; then subtitles="$subtitles2"
    elif [[ -n $subtitles3 ]] ; then subtitles="$subtitles3"
    elif [[ -n $subtitles4 ]] ; then subtitles="$subtitles4"
    elif [[ -n $subtitles5 ]] ; then subtitles="$subtitles5" ; fi
    # test-print subtitles "$subtitles"
    retrun 0
}

play() {
    if [[ "$1" =~ /mnt/data/Downloads/sub ]] ;then
        mpv --sub-files="$subtitles" "$arg1"
    else
        mpv --sub-files="$videodir""$subtitles" "$arg1"
    fi
    retrun 0
}

if [[ -n $ep1 ]] ; then ep="$ep1"
elif [[ -n $ep2 ]] ; then ep="$ep2"
elif [[ -n $ep3 ]] ; then ep="$ep3" ; fi
# test-print episode "$ep"

[[ -n $videodir ]] && cd "$videodir"

# for recursive directories
# probably need -2 deep level, otherwise so many files will be checked
shopt -s globstar
check "**/*"

if [[ -z "$subtitles" ]] ; then
    check "$SUBDIR/**/*"
fi

# when this script runs in terminal, select-loop activates.
# added "--dired" as $2 to distinguish between emacs-dired and terminal
if [[ $2 != "--dired" ]] ; then
    subtitlelines=$(sed s/:/\\n/g <<< $subtitles)
    # test-print subtitlelines "$subtitlelines"
    if (( $(wc -l <<< $subtitlelines) == 1 )) ; then
        selectedsubtitle="$subtitlelines"
    elif (( $(wc -l <<< $subtitlelines) > 1 )) ; then
        printf "\n"
        readarray -t arr_subtitles <<< "$subtitlelines"
        select subtitle in "${arr_subtitles[@]}" ; do
            if [[ $REPLY =~ ^("00")$ ]] ; then
                printf "\n"
                printf "\n You choose all subtitles. They'll be loaded."
                printf "\n To cycle through the available subtitles,"
                printf "\n press j and J."
                grep-print "$subtitles"
                play "$subtitles"
                exit 0
            elif [[ $REPLY =~ ^("0")$ ]] ; then
                printf "\n"
                printf "\n You choose no subtitle."
                printf "\n It doesn't load any external subtitle."
                printf "\n"
                mpv --sub-auto=no "$1"
                exit 0
            fi
            selectedsubtitle="$subtitle"
            break
        done
    fi
fi

if [[ -n $selectedsubtitle ]] ; then
    grep-print "$selectedsubtitle"
    play "$selectedsubtitle"
elif [[ -n $subtitles ]] ; then
    grep-print "$subtitles"
    play "$subtitles"
else
    mpv "$1"
fi
