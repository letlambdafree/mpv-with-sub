#!/bin/bash

# mpv supports three subtitle options (exact, fuzzy, all)
# this is only for a video with episodes like S01E01, E01, Series.1.Part.1

# video = S01E01             subtitle = S01E01
#         S01.E01                       E01
#
# video = E01                subtitle = E01
#                                       S01E01
#
# video = Series.1.Part.1    subtitle = Series.1.Part.1
#                                       E01

# --sub-files="subtitle1:subtitle2:subtitle3"
#
# --sub-file="$subtitle1" --sub-file="$subtitle2" --sub-file="$subtitle3"

if [[ ! -e $1 ]] ; then
    printf "\n"
    printf "\n required a file as the first argument."
    printf "\n"
    exit 1
fi

PS3="Choose : "
SUBEXT=".*\.(srt|smi|ass|sub)$"

videoname="${1##*/}"
videodir="${1%"$videoname"}"
lowername=$(awk '{print tolower($0)}' <<< "$videoname")

ep1=$(expr "$lowername" : ".*\(s[0-9]\+\.\?e[0-9]\+\).*")
ep2=$(expr "$lowername" : ".*\(e[0-9]\+\).*")
ep3=$(expr "$lowername" : ".*\(series\.\?[0-9]\+\.\?part\.\?[0-9]\+\).*")
ep=$ep1 || ep=$ep2 || ep=$ep3

if [[ -z $ep ]] ; then
    mpv "$1"
    exit 0
fi

# printf "\n"
# printf "\n episode is $ep"
# printf "\n"

[[ -n $videodir ]] && cd "$videodir"

# for recursive directories
# probably need -2 deep level, otherwise so many files will be checked

shopt -s globstar
for file in **/* ; do
    lowerfile=$(awk '{print tolower($0)}' <<< "$file")
    if [[ $lowerfile =~ $SUBEXT ]] ; then
        if [[ $lowerfile =~ $ep ]] ; then
            if [[ -z $subtitles1 ]] ; then
                subtitles1="$file"
            else
                subtitles1="$subtitles1":"$file"
            fi
            # printf "\n"
            # printf "\n subtitles1 is $subtitles1"
            # printf "\n"
            # break
        elif [[ $lowerfile =~ e0*"${ep#*e}" ]] ; then
            if [[ -z $subtitles2 ]] ; then
                subtitles2="$file"
            else
                subtitles2="$subtitles2":"$file"
            fi
            # printf "\n"
            # printf "\n subtitles2 is $subtitles2"
            # printf "\n"
            # break
        elif [[ $lowerfile =~ e0*"${ep#*part\.}" ]] ; then
            if [[ -z $subtitles3 ]] ; then
                subtitles3="$file"
            else
                subtitles3="$subtitles3":"$file"
            fi
            # printf "\n"
            # printf "\n subtitles3 is $subtitles3"
            # printf "\n"
            # break
        fi
    fi
done

# s01e01 > e01 > series.1.part.1
subtitles="$subtitles1" || subtitles="$subtitles2" || subtitles="$subtitles3"

# all subtitles, s01e01 + e01 + series.1.part.1
# subtitles="$subtitles1":"$subtitles2":"$subtitles3"

# printf "\n"
# printf "\n subtitles is $subtitles"
# printf "\n"

# when this script runs in terminal, select-loop activates.
# added "--dired" as $2 to distinguish between emacs-dired and terminal
if [[ $2 != "--dired" ]] ; then
    subtitlelines=$(sed s/:/\\n/g <<< $subtitles)
    # printf "\n"
    # printf "\n subtitlelines is $subtitlelines"
    # printf "\n"
    if (( $(wc -l <<< $subtitlelines) == 1 )) ; then
        selectedsubtitle="$subtitlelines"
    elif (( $(wc -l <<< $subtitlelines) > 1 )) ; then
        printf "\n"
        readarray -t arr_subtitles <<< "$subtitlelines"
        select subtitle in "${arr_subtitles[@]}" ; do
            if [[ $REPLY =~ ^("*"|"00")$ ]] ; then
                printf "\n"
                printf "\n You choose all subtitles. They'll be loaded."
                printf "\n To cycle through the available subtitles,"
                printf "\n press j and J."
                printf "\n"
                grep --color=auto . <<< "$subtitles"
                printf "\n"
                mpv --sub-files="$videodir""$subtitles" "$1"
                exit 0
            elif [[ $REPLY =~ ^("0")$ ]] ; then
                printf "\n"
                printf "\n You choose no subtitle."
                printf "\n Don't automatically load external subtitle files."
                printf "\n"
                mpv --sub-auto=no "$1"
                exit 0
            fi
            selectedsubtitle="$subtitle"
            break
        done
    fi
fi

if [[ -n $selectedsubtitle ]] ; then
    printf "\n"
    grep --color=auto . <<< "$selectedsubtitle"
    printf "\n"
    mpv --sub-file="$videodir""$selectedsubtitle" "$1"
elif [[ -n $subtitles ]] ; then
    printf "\n"
    grep --color=auto . <<< "$subtitles"
    printf "\n"
    mpv --sub-files="$videodir""$subtitles" "$1"
else
    mpv "$1"
fi
